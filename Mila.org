#+TITLE:  Mila.cat Configuration and Deployment
#+AUTHOR: Dmitri Brengauz
#+EMAIL:  dmitri@momus.net
#+DATE:   3 March 2016
#+TAGS:   freebsd technical
#+DESCRIPTION: Setup for Mila.cat development and deploy

* What am I doing?
  The idea of literate programing holds obvious attractions; the idea
  of literate DevOps even more so: in theory, an enitre site can be
  constructed from one well written Org-mode file, and even a complete
  testing/development environment that mirrors the site can be spun up
  with just a few keystrokes. For me, this idea went from hopeful
  Google term to something approaching reality when I stumbled across
  [[http://www.howardism.org/Technical/Emacs/literate-devops.html][this blog post]].
*** Preliminary steps:
    1. Create project directory, create this file inside of it.
    2. Create a Vagrantfile in this directory for dev/testing
    3. Incorporate Vagrantfile into this document
    4. Use steps divined for Vagrantfile to configure production
       server on Digital Ocean
    6. Profit!!!

*** TODO [0/2] Modify [[https://github.com/wunki/vagrant-freebsd/blob/master/Vagrantfile][wunki's]] Vagrantfile, to suit our needs.:

     - [ ] Out of the box, wunki uses Virtual box. Change this to libvirt for a speedup.
     #+BEGIN_SRC ruby :tangle Vagrantfile
       # -*- mode: ruby; -*-

       
       ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

       Vagrant.configure("2") do |config|
         config.vm.guest = :freebsd
         config.vm.network "public_network"
     #+END_SRC
     
     - [ ] Initially, NFS shared folders don't work. Right now, I don't care.
       
     #+BEGIN_SRC ruby :tangle Vagrantfile
       # Use NFS as a shared folder
       #config.vm.synced_folder ".", "/vagrant", :nfs => true, id: "vagrant-root"

       config.vm.provider :virtualbox do |vb, override|
         override.vm.box_url = "https://wunki.org/files/freebsd-10.2-amd64-wunki.box"
         override.vm.box = "freebsd-10.2-amd64-wunki"

         # vb.customize ["startvm", :id, "--type", "gui"]
         vb.customize ["modifyvm", :id, "--memory", "512"]
         vb.customize ["modifyvm", :id, "--cpus", "2"]
         vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
         vb.customize ["modifyvm", :id, "--audio", "none"]
                  vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
                  vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
                end
       end
     #+END_SRC

*** Starting the VM
    Because of lag time, currently running "vagrant up" in an eterm buffer.

***** Vagrant vagrancies
     - virtual box depends on kernel modules, these have to manually
       be updated whenever the kernel packages are updated.
       1. Run `VBoxManage --version` to see if this is the problem.
       2. Then `sudo /etc/init.d/vboxdrv setup` to fix it.
     - `vagrant up` should be ready to go.
     - use `[[https://github.com/dergachev/vagrant-vbox-snapshot][vagrant plugin install vagrant-vbox-snapshot]]` for our
       current VBox setup
     - `vagrant snapshot take BOXNAME  NAME` before we go too crazy
        

*** Verifying the ssh connection
     #+BEGIN_SRC sh :dir /ssh:MilaVM:~
     uname -a
     #+END_SRC

     #+RESULTS:
     : FreeBSD vagrant-freebsd-10 10.2-RELEASE FreeBSD 10.2-RELEASE #0 r286666: Wed Aug 12 15:26:37 UTC 2015     root@releng1.nyi.freebsd.org:/usr/obj/usr/src/sys/GENERIC  amd64

*** Updating operating system before installing software
    `freebsd-update fetch` and `install` are meant to be used
    interactively, from here we can run the cron script
    #+BEGIN_SRC sh :dir /ssh:MilaVM:~
      sudo freebsd-update cron
    #+END_SRC
    update pkg packages
    #+BEGIN_SRC sh :dir /ssh:MilaVM:~
     sudo pkg upgrade --yes --quiet
    #+END_SRC

    #+RESULTS:
    | src component not installed                      | skipped |

* FreeBSD Rails server general system setup

*** Directory adjustments
    - Source directory for tarball installs
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
        mkdir ~/src
      #+END_SRC

*** Needful software
    - Git, of course
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
      sudo pkg install --yes --quiet git
      #+END_SRC

      #+RESULTS:
      : The most recent version of packages are already installed

   

*** Installing Ruby and Gems
    - Just to make things simple and perhaps secure, let's use FreeBSD's
      ruby package.  This will be my system ruby, so create a symbolic ling between
      the executable and /usr/bin/ruby
 
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
        sudo pkg install --yes --quiet ruby23
        sudo ln -s /usr/local/bin/ruby23 /usr/bin/ruby
        ruby --version
      #+END_SRC

      #+RESULTS:
      | The  | most    | recent      | version  |     of | packages          | are | already | installed |
      | ruby | 2.3.0p0 | (2015-12-25 | revision | 53290) | [amd64-freebsd10] |     |         |           |

    - Gems: download from Github, use ruby to install system-wide.
      This leaves a 23MB src directory, which could be removed if
      desperate for space.
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~/src
        #git clone https://github.com/rubygems/rubygems
        #sudo ruby ~/src/rubygems/setup.rb
        sudo ln -s /usr/local/bin/gem23 /usr/bin/gem
        gem --version
      #+END_SRC

      #+RESULTS:
      : 2.6.3





*** Installing Apache
    Start with the [[https://www.freebsd.org/doc/handbook/network-apache.html][Basic Freebsd]] Apache installation:
    - Grab the package and install it:
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
        sudo pkg install --yes --quiet apache24 
      #+END_SRC

    - Initial run RESULTS:
      | ===>  Creating users and/or groups.
      | Using existing group 'www'.
      | Using existing user 'www'.
      | Message from apache24-2.4.18:
      | To run apache www server from startup, add yes
      | in your /etc/rc.conf. Extra options can be found in startup script.

      | Your hostname must be resolvable using at least 1 mechanism in    |
      | /etc/nsswitch.conf typically DNS or /etc/hosts or apache might    |
      | have issues starting depending on the modules you are using.      |
      |                                                                   |
      | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |
      |                                                                   |
      | apache24 default build changed from static MPM to modular MPM     |
      | - more modules are now enabled per default in the port            | 
      | - icons and error pages moved from WWWDIR to DATADIR              |
      |                                                                   |
      | If build with modular MPM and no MPM is  activated in             |
      | httpd.conf, then mpm_prefork will be activated as default         |
      | MPM in etc/apache24/modules.d to keep compatibility with          |
      | existing php/perl/python modules! |         |    |           |    |
      |                                                                   |
      | Please compare the existing httpd.conf with httpd.conf.sample     |
      | and merge missing modules/instructions into httpd.conf!           |
      |                                                                   |
      | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |

    - Modify /etc/rc.conf to start apache by default
      This I do directly now, but will script at later day;

    - Apache should start:
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
      sudo service apache24 start
      #+END_SRC

      #+RESULTS:
      | Performing | sanity    | check | on | apache24 | configuration: |
      | Starting   | apache24. |       |    |          |                |

      
*** Install [[https://www.phusionpassenger.com/library/walkthroughs/deploy/ruby/ownserver/apache/oss/rubygems_norvm/install_passenger.html][Phusion Passenger]]
    - Install the gems
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
      sudo gem install passenger --no-rdoc --no-ri
      #+END_SRC

      - Initial  RESULTS:
        | Fetching:    | rake-11.1.2.gem                               |                  |
        | Successfully | installed                                     | rake-11.1.2      |
        | Fetching:    | rack-1.6.4.gem                                |                  |
        | Successfully | installed                                     | rack-1.6.4       |
        | Fetching:    | passenger-5.0.27.gem                          |                  |
        | Building     | native extensions. This could take a while... |                  |
        | Successfully | installed                                     | passenger-5.0.27 |
        | 3            | gems                                          | installed        |

    - run Passenger Apache module installer
      Had a [[https://github.com/phusion/passenger/issues/1586][problem]] compiling on the VM; 
      This is an interactive installer, so we will have to figure out
      how to automate this later
      #+ sh :dir /ssh:MilaVM:~
      sudo passenger-install-apache2-module
      #+END_SRC
      
      #+RESULTS:
      Please edit your Apache configuration file, and add these lines:
      
        LoadModule passenger_module /usr/local/lib/ruby/gems/2.3/gems/passenger-5.0.27/buildout/apache2/mod_passenger.so
       <IfModule mod_passenger.c>
       PassengerRoot /usr/local/lib/ruby/gems/2.3/gems/passenger-5.0.27
       PassengerDefaultRuby /usr/local/bin/ruby23
       </IfModule>
    
      After you restart Apache, you are ready to deploy any number of web
      applications on Apache, with a minimum amount of configuration!
    

       Checking whether the Passenger module is correctly configured in Apache... (!)
      
      You did not specify 'LoadModule passenger_module' in any of your Apache
      configuration files. Please paste the configuration snippet that this
      installer printed earlier, into one of your Apache configuration files, such
      as /usr/local/etc/apache24/httpd.conf.


   Detected 0 error(s), 1 warning(s)

   To learn how to deploy a web app on Passenger, please follow the deployment
   guide:

   https://www.phusionpassenger.com/library/deploy/apache/deploy/

   Enjoy Phusion Passenger, a product of Phusion (www.phusion.nl) :-)
   https://www.phusionpassenger.com



* Wrong Turns
*** Rbenv later? 
    Because of this [[https://www.ixsystems.com/blog/freebsd-on-rails/][iX Systems Article]] I decided on rbenv to install
    ruby.

    #+BEGIN_SRC sh :dir /ssh:MilaVM:~
    sudo pkg install --yes  --quiet devel/rbenv
    #+END_SRC

    - Install the [[https://github.com/rbenv/ruby-build#readme][ruby-build]] plugin to ease install of rubies.
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
        git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
      #+END_SRC
    - Using ruby-build, fetch and install the proper ruby:
      #+BEGIN_SRC sh :dir /ssh:MilaVM:~
      
      #+END_SRC


    #+RESULTS:

    
  

